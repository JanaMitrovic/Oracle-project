/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.Controller;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.entity.StavkaNaloga;
import model.entity.VrstaPrihoda;

/**
 *
 * @author HP
 */
public class AddStavkaNalogaForma extends javax.swing.JFrame {

    String operation;
    StavkeNalogaForma parent;
    StavkaNaloga sn;

    /**
     * Creates new form AddStavkaNalogaForma
     */
    public AddStavkaNalogaForma(StavkeNalogaForma parent, boolean modal, StavkaNaloga sn, String operation) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.parent = parent;
        this.sn = sn;
        this.operation = operation;
        
        fillCmbVrstaPrihoda();
        
        if (operation.equals("UPDATE")) {
            adjustFields(sn);
        } else {
            txtDatumIzdavanja.setEnabled(false);
            try {
                int rb = Controller.getInstance().getNextBroj(sn);
                txtRb.setText(String.valueOf(++rb));
                txtRb.setEnabled(false);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja rednog broja!", "Greska", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtDatumOd = new javax.swing.JTextField();
        txtDatumDo = new javax.swing.JTextField();
        txtDatumIzdavanja = new javax.swing.JTextField();
        cmbVrstaPrihoda = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtRb = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Datum do:");

        jLabel3.setText("Datum od:");

        jLabel4.setText("Datum izdavanja:");

        jLabel5.setText("Vrsta prihoda:");

        cmbVrstaPrihoda.setEditable(true);

        btnAdd.setText("Dodaj stavku");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jLabel6.setText("Rb:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(112, 112, 112)
                        .addComponent(txtRb))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(72, 72, 72)
                        .addComponent(txtDatumOd))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(72, 72, 72)
                        .addComponent(txtDatumDo, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDatumIzdavanja, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                            .addComponent(cmbVrstaPrihoda, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtRb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDatumOd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtDatumDo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cmbVrstaPrihoda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDatumIzdavanja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnAdd))
                    .addComponent(jLabel1))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            if (this.operation.equals("INSERT")) {
                this.insert();
            } else if (this.operation.equals("UPDATE")) {
                this.update();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
            adjustFields(sn);            
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddStavkaNalogaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddStavkaNalogaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddStavkaNalogaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddStavkaNalogaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new AddStavkaNalogaForma().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JComboBox cmbVrstaPrihoda;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JTextField txtDatumDo;
    private javax.swing.JTextField txtDatumIzdavanja;
    private javax.swing.JTextField txtDatumOd;
    private javax.swing.JTextField txtRb;
    // End of variables declaration//GEN-END:variables

    private void adjustFields(StavkaNaloga sn) {
        txtRb.setText(String.valueOf(sn.getRb()));
        txtRb.setEnabled(false);
        txtDatumOd.setText(String.valueOf(sn.getDatumOd()));
        txtDatumDo.setText(String.valueOf(sn.getDatumDo()));
        cmbVrstaPrihoda.setSelectedItem(sn.getVrstaPrihoda());
        txtDatumIzdavanja.setText(String.valueOf(sn.getDatumIzdavanja()));
        btnAdd.setText("Izmeni stavku");
    }

    private void fillCmbVrstaPrihoda() {
        try {
            cmbVrstaPrihoda.removeAllItems();
            List<VrstaPrihoda> list = Controller.getInstance().getVrstaPrihodaList();
            for (VrstaPrihoda vrstaPrihoda : list) {
                cmbVrstaPrihoda.addItem(vrstaPrihoda);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja vrsta prihoda!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void insert() throws Exception {
        if (txtDatumOd.getText().isEmpty() || txtDatumDo.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        int rb = Integer.parseInt(txtRb.getText());
        String dod = txtDatumOd.getText();
        String ddo = txtDatumDo.getText();
        VrstaPrihoda vp = (VrstaPrihoda) cmbVrstaPrihoda.getSelectedItem();
        
        Date datumOd = new Date();
        Date datumDo = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {
            datumOd = sdf.parse(dod);
            datumDo = sdf.parse(ddo);
        } catch (ParseException ex) {
            Logger.getLogger(AddNalogForma.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Datum mora biti u odgovarajucem formatu!");
            return;
        }
        
        sn.setRb(rb);
        sn.setDatumOd(datumOd);
        sn.setDatumDo(datumDo);
        sn.setVrstaPrihoda(vp);
        
        Controller.getInstance().insert2(sn);
        JOptionPane.showMessageDialog(this, "Uspesno dodata stavka naloga!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        parent.refreshTable();
        this.setVisible(false);
        dispose();
    }

    private void update() throws Exception {
        if (txtDatumOd.getText().isEmpty() || txtDatumDo.getText().isEmpty() || txtDatumIzdavanja.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        int rb = Integer.parseInt(txtRb.getText());
        String dod = txtDatumOd.getText();
        String ddo = txtDatumDo.getText();
        String dizd = txtDatumIzdavanja.getText();
        VrstaPrihoda vp = (VrstaPrihoda) cmbVrstaPrihoda.getSelectedItem();
        
        Date datumOd = new Date();
        Date datumDo = new Date();
        Date datumIzdavanja = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {
            datumOd = sdf.parse(dod);
            datumDo = sdf.parse(ddo);
            datumIzdavanja = sdf.parse(dizd);
        } catch (ParseException ex) {
            Logger.getLogger(AddNalogForma.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Datum mora biti u odgovarajucem formatu!");
            return;
        }
        
        StavkaNaloga stavka = new StavkaNaloga(rb, sn.getNalog(), datumOd, datumDo, vp, datumIzdavanja);
        
        if(!datumIzdavanja.equals(sn.getDatumIzdavanja())){
            stavka.setIzmenaDatIzd(true);
        }
        
        Controller.getInstance().update(stavka);
        JOptionPane.showMessageDialog(this, "Uspesno izmenjena stavka!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        parent.refreshTable();
        this.setVisible(false);
        dispose();
    }
}
