/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.Controller;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.Year;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import model.entity.Filijala;
import model.entity.Obrazac;
import model.entity.PoreskiObveznik;
import model.entity.Resenje;
import model.entity.Zapisnik;

/**
 *
 * @author HP
 */
public class AddZapisnikForm extends javax.swing.JFrame {

    String operation;
    Zapisnik z;
    
    /**
     * Creates new form AddZapisnikForm
     */
    public AddZapisnikForm(Zapisnik z, String operation) {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.operation = operation;
        this.z = z;
        
        fillCmbFilijala();
        fillCmbObrazac();
        fillCmbPO();
        
        if (operation.equals("UPDATE")) {
            adjustFields(z);
        } else {
            try {
                fillForm();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja broja resenja!", "Greska", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtBroj = new javax.swing.JTextField();
        txtGodina = new javax.swing.JTextField();
        txtDatDonosenja = new javax.swing.JTextField();
        txtDatPrijema = new javax.swing.JTextField();
        cmbFilijala = new javax.swing.JComboBox();
        cmbObrazac = new javax.swing.JComboBox();
        cmbPO = new javax.swing.JComboBox();
        btnAdd = new javax.swing.JButton();

        jLabel4.setText("jLabel4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Broj:");

        jLabel2.setText("Godina:");

        jLabel3.setText("Filijala:");

        jLabel5.setText("Obrazac:");

        jLabel6.setText("Datum donosenja:");

        jLabel7.setText("Datum prijema:");

        jLabel8.setText("Poreski obveznik:");

        cmbFilijala.setEditable(true);

        cmbObrazac.setEditable(true);

        cmbPO.setEditable(true);

        btnAdd.setText("Dodaj zapisnik");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(122, 122, 122)
                        .addComponent(txtBroj))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel8))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtGodina, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE)
                            .addComponent(cmbFilijala, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbPO, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(45, 45, 45)
                        .addComponent(txtDatDonosenja, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(98, 98, 98)
                        .addComponent(cmbObrazac, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(60, 60, 60)
                        .addComponent(txtDatPrijema, javax.swing.GroupLayout.DEFAULT_SIZE, 226, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnAdd)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBroj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtGodina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbFilijala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbObrazac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtDatDonosenja, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtDatPrijema, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cmbPO, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAdd)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        try {
            if (this.operation.equals("INSERT")) {
                this.insert();
            } else if (this.operation.equals("UPDATE")) {
                this.update();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAddActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddZapisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddZapisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddZapisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddZapisnikForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
//                new AddZapisnikForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JComboBox cmbFilijala;
    private javax.swing.JComboBox cmbObrazac;
    private javax.swing.JComboBox cmbPO;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JTextField txtBroj;
    private javax.swing.JTextField txtDatDonosenja;
    private javax.swing.JTextField txtDatPrijema;
    private javax.swing.JTextField txtGodina;
    // End of variables declaration//GEN-END:variables

    private void fillForm() throws Exception {
        txtGodina.setText(String.valueOf(String.valueOf(Year.now())));
        int broj = Controller.getInstance().getNextBroj(new Zapisnik());
        txtBroj.setText(String.valueOf(++broj));
        txtGodina.setEnabled(false);
        txtBroj.setEnabled(false);
    }

    private void fillCmbFilijala() {
        try {
            cmbFilijala.removeAllItems();
            List<Filijala> filijale = Controller.getInstance().getFilijalaList();
            for (Filijala filijala : filijale) {
                cmbFilijala.addItem(filijala);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja filijala!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillCmbObrazac() {
        try {
            cmbObrazac.removeAllItems();
            List<Obrazac> obrasci = Controller.getInstance().getObrazacList();
            for (Obrazac obrazac : obrasci) {
                cmbObrazac.addItem(obrazac);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja obrazaca!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void fillCmbPO() {
        try {
            cmbPO.removeAllItems();
            List<PoreskiObveznik> po = Controller.getInstance().getPoreskiObveznikList();
            for (PoreskiObveznik poreskiObveznik : po) {
                cmbPO.addItem(poreskiObveznik);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Greska prilikom ucitavanja poreskih obveznika!", "Greska", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void adjustFields(Zapisnik z) {
        txtGodina.setText(String.valueOf(z.getGodina()));
        txtBroj.setText(String.valueOf(z.getBroj()));
        txtGodina.setEnabled(false);
        txtBroj.setEnabled(false);
        cmbFilijala.setSelectedItem(z.getFilijala());
        cmbObrazac.setSelectedItem(z.getObrazac());
        txtDatDonosenja.setText(String.valueOf(z.getDatumDonosenja()));
        txtDatPrijema.setText(String.valueOf(z.getDatumPrijema()));
        cmbPO.setSelectedItem(z.getPoreskiObveznik());
        this.btnAdd.setText("Izmeni resenje");
    }
    
    private void insert() throws Exception {
        if (txtDatDonosenja.getText().isEmpty() || txtDatPrijema.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        int broj = Integer.parseInt(txtBroj.getText());
        int godina = Integer.parseInt(txtGodina.getText());
        Filijala filijala = (Filijala) cmbFilijala.getSelectedItem();
        Obrazac obrazac = (Obrazac) cmbObrazac.getSelectedItem();
        String dDonosenja = txtDatDonosenja.getText();
        String dPrijema = txtDatPrijema.getText();
        PoreskiObveznik po = (PoreskiObveznik) cmbPO.getSelectedItem();

        Date datumDonosenja = new Date();
        Date datumPrijema = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {
            datumDonosenja = sdf.parse(dDonosenja);
            datumPrijema = sdf.parse(dPrijema);
        } catch (ParseException ex) {
            Logger.getLogger(AddNalogForma.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Datum mora biti u odgovarajucem formatu!");
            return;
        }

        Zapisnik z = new Zapisnik(broj, godina, filijala, obrazac, datumDonosenja, datumPrijema, po);

        Controller.getInstance().insert2(z);
        JOptionPane.showMessageDialog(this, "Uspesno dodat novi zapisnik!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        this.setVisible(false);
        dispose();
        ZapisnikForma form = new ZapisnikForma();
        form.setVisible(true);
    }

    private void update() throws Exception {
        if (txtDatDonosenja.getText().isEmpty() || txtDatPrijema.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Morate popuniti sva polja!");
            return;
        }
        
        int broj = Integer.parseInt(txtBroj.getText());
        int godina = Integer.parseInt(txtGodina.getText());
        Filijala filijala = (Filijala) cmbFilijala.getSelectedItem();
        Obrazac obrazac = (Obrazac) cmbObrazac.getSelectedItem();
        String dDonosenja = txtDatDonosenja.getText();
        String dPrijema = txtDatPrijema.getText();
        PoreskiObveznik po = (PoreskiObveznik) cmbPO.getSelectedItem();

        Date datumDonosenja = new Date();
        Date datumPrijema = new Date();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        try {
            datumDonosenja = sdf.parse(dDonosenja);
            datumPrijema = sdf.parse(dPrijema);
        } catch (ParseException ex) {
            Logger.getLogger(AddNalogForma.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Datum mora biti u odgovarajucem formatu!");
            return;
        }

        Zapisnik z = new Zapisnik(broj, godina, filijala, obrazac, datumDonosenja, datumPrijema, po);

        Controller.getInstance().update(z);
        JOptionPane.showMessageDialog(this, "Uspesno ste izmenili zapisnik!", "Uspesno", JOptionPane.INFORMATION_MESSAGE);
        this.setVisible(false);
        dispose();
        ZapisnikForma form = new ZapisnikForma();
        form.setVisible(true);
    }
    
}

